plugins {
    id 'com.gradleup.shadow'
}

loom {
    forge {
        mixinConfig "learnplay.mixins.json"
    }

    runs {
        client {
            vmArgs.addAll([
                '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
                '--add-opens', 'java.base/java.util=ALL-UNNAMED',
                '--add-exports', 'java.base/sun.security.util=ALL-UNNAMED',
                '--add-opens', 'java.base/java.util.jar=ALL-UNNAMED',
                // Disable module system to avoid conflicts with Architectury devlibs
                '-Djdk.module.validation=false',
                '-Djdk.module.illegalAccess.silent=true'
            ])
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'fml.earlyprogresswindow', 'false'
        }
        server {
            vmArgs.addAll([
                '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
                '--add-opens', 'java.base/java.util=ALL-UNNAMED',
                '--add-exports', 'java.base/sun.security.util=ALL-UNNAMED',
                '--add-opens', 'java.base/java.util.jar=ALL-UNNAMED',
                // Disable module system to avoid conflicts with Architectury devlibs
                '-Djdk.module.validation=false',
                '-Djdk.module.illegalAccess.silent=true'
            ])
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
        }
    }
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    forge "net.minecraftforge:forge:$rootProject.forge_version"

    // Architectury API. This is optional, and you can comment it out if you don't need it.
    modImplementation "dev.architectury:architectury-forge:$rootProject.architectury_api_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive = false }
    common(project(path: ':forge-like', configuration: 'namedElements')) { transitive = false }
    shadowBundle project(path: ':common', configuration: 'transformProductionForge')
    shadowBundle project(path: ':forge-like', configuration: 'transformProductionForge')
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/mods.toml') {
        expand version: inputs.properties.version
    }
}

// Task to strip module-info from devlibs to prevent JPMS conflicts
task stripModuleInfo {
    doLast {
        def devlibsDir = file("${project.rootDir}/common/build/devlibs")
        def forgeLikeDevlibsDir = file("${project.rootDir}/forge-like/build/devlibs")

        [devlibsDir, forgeLikeDevlibsDir].each { dir ->
            if (dir.exists()) {
                dir.listFiles().each { jar ->
                    if (jar.name.endsWith('.jar')) {
                        println "Stripping module-info from ${jar.name}"
                        ant.zip(destfile: "${jar.absolutePath}.tmp") {
                            zipfileset(src: jar.absolutePath) {
                                exclude(name: 'module-info.class')
                                exclude(name: 'META-INF/versions/*/module-info.class')
                                exclude(name: 'META-INF/MANIFEST.MF')
                            }
                        }
                        jar.delete()
                        file("${jar.absolutePath}.tmp").renameTo(jar)
                    }
                }
            }
        }
    }
}

// Make runClient depend on stripModuleInfo
tasks.named('runClient').configure {
    dependsOn stripModuleInfo
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'

    // Merge duplicate files instead of failing
    mergeServiceFiles()

    // Exclude module-info to prevent JPMS conflicts
    exclude 'module-info.class'
    exclude 'META-INF/versions/*/module-info.class'
}

remapJar {
    inputFile.set shadowJar.archiveFile
}
